name: Generate SWDMWW-WRT Amlogic Firmware

on:
  workflow_dispatch:
    inputs:
      release_branch:
        description: "Select the release branch:"
        required: true
        default: "openwrt:24.10.2"
        type: choice
        options:
          - openwrt:24.10.2
          - openwrt:24.10.1
          - openwrt:24.10.0
          - openwrt:23.05.5
          - immortalwrt:24.10.0
          - immortalwrt:23.05.4
      target:
        description: "Select device board"
        required: false
        default: "all"
        type: choice
        options:
          - all
          - s905x
          - s905x-b860h
          - s905x_s905x-b860h
      openwrt_kernel:
        description: "Select kernel version"
        required: false
        default: "5.15.y_6.6.y"
        type: choice
        options:
          - 5.4.y
          - 5.10.y
          - 5.15.y
          - 6.1.y
          - 6.6.y
          - 6.1.y_6.6.y
          - 5.15.y_6.6.y
      tunnel:
        description: "Select VPN Client app:"
        required: true
        default: "openclash"
        type: choice
        options:
          - all
          - openclash
          - passwall
          - nikki
          - openclash-passwall
          - nikki-passwall
          - nikki-openclash
          - openclash-passwall-nikki
          - no-tunnel
      clean:
        description: "Do 'make clean' for each run"
        required: false
        default: "true"
        type: boolean

env:
  TARGET: ${{ inputs.target }}
  RELEASE_BRANCH: ${{ inputs.release_branch }}
  TUNNEL: ${{ inputs.tunnel }}
  CLEAN: ${{ inputs.clean }}
  TZ: Asia/Jakarta
  WORKING_DIR: imagebuilder
  DEBIAN_FRONTEND: noninteractive

jobs:
  check-compatibility:
    name: Check Compatibility
    runs-on: ubuntu-22.04
    outputs:
      status: ${{ steps.compatibility.outputs.status }}

    steps:
      - name: Check System Requirements
        id: compatibility
        run: |
          echo "Checking system requirements..."
          echo "CPU Architecture: $(uname -m)"
          echo "Available RAM: $(free -h)"
          echo "Available Disk Space: $(df -h /)"
          echo "Selected tunnel option: [${{ env.TUNNEL }}]"
          echo "status=success" >> $GITHUB_OUTPUT

  build-firmware:
    name: Build ${{ inputs.release_branch }}-${{ inputs.tunnel }}
    needs: check-compatibility
    if: needs.check-compatibility.outputs.status == 'success'
    runs-on: ubuntu-22.04

    steps:
      - name: Initialization environment
        id: init
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          TYPE="AMLOGIC"
          echo "TYPE=$TYPE" >> $GITHUB_ENV
          if [ "$TARGET" == "all" ]; then
          docker rmi $(docker images -q) 2>/dev/null
          [[ -n "${AGENT_TOOLSDIRECTORY}" ]] && sudo rm -rf "${AGENT_TOOLSDIRECTORY}"
          sudo rm -rf /usr/share/dotnet /etc/apt/sources.list.d /usr/local/lib/android 2>/dev/null
          sudo swapoff -a
          sudo rm -f /swapfile /mnt/swapfile
          fi
          sudo -E apt-get -y update
          if [ "$TARGET" == "all" ]; then
          sudo -E apt-get -y purge azure-cli ghc* zulu* llvm* firefox google* dotnet* powershell openjdk* mongodb* moby* || true
          fi
          sudo -E apt-get -y install $(curl -fsSL https://tinyurl.com/ubuntu2204-make-openwrt)
          if [ "$TARGET" == "all" ]; then
          sudo -E systemctl daemon-reload
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get clean
          sudo sed -i '/NVM_DIR/d;/skel/d' /root/{.bashrc,.profile}
          sudo rm -rf ~/{.cargo,.dotnet,.rustup}
          fi
          sudo timedatectl set-timezone "${TZ}"
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Create simulated physical disk
        if: github.event.inputs.target == 'all'
        run: |
          mnt_size=$(expr $(df -h /mnt | tail -1 | awk '{print $4}' | sed 's/[[:alpha:]]//g' | sed 's/\..*//') - 1)
          root_size=$(expr $(df -h / | tail -1 | awk '{print $4}' | sed 's/[[:alpha:]]//g' | sed 's/\..*//') - 4)
          sudo truncate -s "${mnt_size}"G /mnt/mnt.img
          sudo truncate -s "${root_size}"G /root.img
          sudo losetup /dev/loop6 /mnt/mnt.img
          sudo losetup /dev/loop7 /root.img
          sudo pvcreate /dev/loop6
          sudo pvcreate /dev/loop7
          sudo vgcreate github /dev/loop6 /dev/loop7
          sudo lvcreate -n runner -l 100%FREE github
          sudo mkfs.xfs /dev/github/runner
          sudo mkdir -p /builder
          sudo mount /dev/github/runner /builder
          sudo chown -R runner.runner /builder
          df -Th

      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          path: origin
          fetch-depth: 1

      - name: Setup Build Variables
        id: variables
        run: |
          # Set board variable
          case "${{ env.TARGET }}" in
            "all")
              echo "openwrt_board=s905_s905-beelink-mini_s905-mxqpro-plus_s905d_s905d-ki-pro_s905d-sml5442tw_s905l_s905l-aurora-1s_s905l-b860av21u_s905l-mg101_s905l2_s905l2-e900v21e_s905l2-wojia_s905l3_s905l3-cm211_s905l3-unt400g1_s905l3-unt402a_s905l3a_s905l3a-cm311_s905l3a-m401a_s905l3b_s905l3b-e900v21d_s905l3b-e900v22d_s905l3b-e900v22e_s905l3b-ip103h_s905l3b-rg020et-ca_s905l3b-unt403a_s905lb-ipbs9505_s905lb-q96-mini_s905lb-r3300l_s905mb_s905w_s905w-w95_s905w-x96-mini_s905w-x96w_s905x_s905x-b860h_s905x-nexbox-a95x_s905x-t95_s905x-tbee_s905x-tx9_s905x2_s905x2-km3_s905x2-x96max-2g_s905x3_s905x3-2101_s905x3-a100_s905x3-a95xf3_s905x3-a95xf3-gb_s905x3-b_s905x3-h96max_s905x3-hk1_s905x3-ip1001m_s905x3-q1_s905x3-q2_s905x3-tx3_s905x3-tx3-bz_s905x3-ugoosx3_s905x3-whale_s905x3-x88-pro-x3_s905x3-x96air_s905x3-x96air-gb_s905x3-x96max_s912_s912-h96pro-plus_s912-m8s-pro_s912-nexbox-a1_s912-nexbox-a2_s912-onecloudpro_s912-phicomm-t1_s912-t95z-plus_s912-tx8-max_s912-tx9-pro-2g_s912-tx9-pro-3g_s912-x92_s912-zyxq-fake_s922x_s922x-ct2000_s922x-gtking_s922x-gtkingpro-h_s922x-odroid-n2_s922x-reva_s922x-ugoos-am6" >> $GITHUB_ENV
              ;;
            *)
              echo "openwrt_board=${{ env.TARGET }}" >> $GITHUB_ENV
              ;;
          esac

          # Set architecture variables
          echo "PROFILE=generic" >> $GITHUB_ENV
          echo "TARGET_SYSTEM=armsr/armv8" >> $GITHUB_ENV
          echo "TARGET_NAME=armsr-armv8" >> $GITHUB_ENV
          echo "ARCH_1=arm64" >> $GITHUB_ENV
          echo "ARCH_2=aarch64" >> $GITHUB_ENV
          echo "ARCH_3=aarch64_generic" >> $GITHUB_ENV

          # Set base distribution info
          BASE="${RELEASE_BRANCH%:*}"
          BRANCH="${RELEASE_BRANCH#*:}"
          VEROP="$(echo "${BRANCH}" | awk -F. '{print $1"."$2}')"

          echo "BASE=$BASE" >> $GITHUB_ENV
          echo "BRANCH=$BRANCH" >> $GITHUB_ENV
          echo "VEROP=$VEROP" >> $GITHUB_ENV
          echo "DOWNLOAD_BASE=https://downloads.${BASE}.org" >> $GITHUB_ENV

          # Set date variables
          echo "DATE=$(date +'%d%m%Y')" >> $GITHUB_ENV
          echo "DATETIME=$(date +'%d.%m.%Y-%H:%M:%S')" >> $GITHUB_ENV
          echo "DATEMONTH=$(date +"%B-%Y" | awk '{print tolower($0)}')" >> $GITHUB_ENV

          echo "Build variables configured successfully"
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Download and Prepare Image Builder
        id: download
        if: steps.variables.outputs.status == 'success'
        run: |
          # Determine archive extension
          CURVER=$(echo "${{ env.BRANCH }}" | cut -d'.' -f1)
          archive_ext=$([ "${CURVER}" == "24" ] && echo "tar.zst" || echo "tar.xz")

          # Download image builder
          RELEASE="${{ env.DOWNLOAD_BASE }}/releases/${{ env.BRANCH }}/targets/${{ env.TARGET_SYSTEM }}/${{ env.BASE }}-imagebuilder-${{ env.BRANCH }}-${{ env.TARGET_NAME }}.Linux-x86_64.${archive_ext}"
          echo "Downloading from: $RELEASE"
          wget --progress=dot:giga "$RELEASE"

          # Extract archive
          case "${archive_ext}" in
            tar.xz)
              tar -xJf *-imagebuilder-* && rm -f *-imagebuilder-*.tar.xz
              ;;
            tar.zst)
              tar --use-compress-program=unzstd -xf *-imagebuilder-* && rm -f *-imagebuilder-*.tar.zst
              ;;
          esac

          # Setup working directory
          mv *-imagebuilder-* ${{ env.WORKING_DIR }}
          cp -r $GITHUB_WORKSPACE/origin/* $GITHUB_WORKSPACE/${{ env.WORKING_DIR }}

          echo "Image builder prepared successfully"
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Download External Packages
        id: packages
        if: steps.download.outputs.status == 'success'
        run: |
          cd ${{ env.WORKING_DIR }}
          chmod +x scripts/PACKAGES.sh
          ./scripts/PACKAGES.sh

          PACKAGE_COUNT=$(find packages -type f -name "*.ipk" | wc -l)
          echo "Downloaded $PACKAGE_COUNT external packages"
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Apply Patches and Customizations
        id: customize
        if: steps.packages.outputs.status == 'success'
        run: |
          cd ${{ env.WORKING_DIR }}

          # Apply patches
          chmod +x scripts/PATCH.sh
          ./scripts/PATCH.sh

          # Apply miscellaneous changes
          chmod +x scripts/MISC.sh
          ./scripts/MISC.sh

          # Configure tunnel apps
          chmod +x scripts/TUNNEL.sh
          if [[ "${{ env.TUNNEL }}" == "all" ]]; then
            ./scripts/TUNNEL.sh openclash-passwall-nikki
          elif [[ "${{ env.TUNNEL }}" =~ ^(openclash|passwall|nikki|openclash-passwall|nikki-passwall|nikki-openclash|openclash-passwall-nikki)$ ]]; then
            ./scripts/TUNNEL.sh "${{ env.TUNNEL }}"
          fi

          echo "Customizations applied successfully"
          df -hT ${PWD}
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Build Firmware Images
        id: build
        if: steps.customize.outputs.status == 'success'
        run: |
          cd ${{ env.WORKING_DIR }}
          mkdir -p compiled_images
          chmod +x make-image.sh

          build_image() {
            local tunnel=$1
            echo "Building with VPN Client: $tunnel"
            
            # Clean if requested
            if [ "${{ env.CLEAN }}" == "true" ]; then
              make clean
            fi
            
            # Build image
            time ./make-image.sh ${{ env.PROFILE }} $tunnel
            
            # Move and rename output files
            for file in bin/targets/"${{ env.TARGET_SYSTEM }}"/*rootfs.tar.gz; do
              if [ -f "$file" ]; then
                new_name="SWDMWW-WRT_$(basename "$file" .tar.gz)_${tunnel}.tar.gz"
                mv "$file" compiled_images/$new_name
              fi
            done
          }

          if [[ "${{ env.TUNNEL }}" == "all" ]]; then
            for tunnel in openclash passwall nikki openclash-passwall nikki-passwall nikki-openclash openclash-passwall-nikki no-tunnel; do
              build_image $tunnel
            done
          else
            build_image ${{ env.TUNNEL }}
          fi

          echo "Images built successfully:"
          ls -la compiled_images/
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Package Amlogic Images
        id: package
        if: steps.build.outputs.status == 'success'
        run: |
          cd ${{ env.WORKING_DIR }}

          package_image() {
            local tunnel=$1
            echo "Packaging images for: $tunnel"
            
            git clone --depth 1 https://github.com/ophub/amlogic-s9xxx-openwrt.git
            mkdir -p amlogic-s9xxx-openwrt/openwrt-armvirt
            
            for file in compiled_images/*_${tunnel}.tar.gz; do
              if [ -f "$file" ]; then
                mv "$file" amlogic-s9xxx-openwrt/openwrt-armvirt/SWDMWW-WRT_openwrt-armsr-armv8-generic-rootfs.tar.gz
                cd amlogic-s9xxx-openwrt
                sudo ./remake -b ${{ env.openwrt_board }} -k ${{ inputs.openwrt_kernel }} -s 1024
                
                # Cari file output dan pindahkan
                find ./openwrt/out/ -name "*.img.gz" | while read FILE_PATH; do
                  if [ -n "$FILE_PATH" ]; then
                    NEW_NAME="SWDMWW-WRT_$(basename "$FILE_PATH" .img.gz)_${tunnel}.img.gz"
                    sudo mv "$FILE_PATH" "$GITHUB_WORKSPACE/${{ env.WORKING_DIR }}/compiled_images/$NEW_NAME"
                  fi
                done
                
                # Kembali ke directory awal
                cd $GITHUB_WORKSPACE/${{ env.WORKING_DIR }}
              fi
            done
            
            sudo rm -rf amlogic-s9xxx-openwrt
          }

          if [[ "${{ env.TUNNEL }}" == "all" ]]; then
            for tunnel in openclash passwall nikki openclash-passwall nikki-passwall nikki-openclash openclash-passwall-nikki no-tunnel; do
              package_image $tunnel
            done
          else
            package_image ${{ env.TUNNEL }}
          fi

          echo "Images packaged successfully"
          echo "status=success" >> $GITHUB_OUTPUT
          ls -la compiled_images/

      - name: Mod SDCard
        id: modsdcard
        if: steps.package.outputs.status == 'success'
        run: |
          cd ${{ env.WORKING_DIR }}

          chmod +x scripts/MODSDCARD.sh
          if [[ "$(find "$GITHUB_WORKSPACE/$WORKING_DIR/compiled_images" -name "*_s905x_*.img.gz")" ]]; then
            ./scripts/MODSDCARD.sh
          fi
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Create Release
        if: steps.modsdcard.outputs.status == 'success'
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "swdmwwwrt-amlogic-${{ env.BRANCH }}"
          name: SWDMWW-WRT-Amlogic-${{ env.BRANCH }}-${{ env.TUNNEL }}-${{ env.DATE }}
          files: ${{ env.WORKING_DIR }}/compiled_images/*.gz
          prerelease: true
          generate_release_notes: true
